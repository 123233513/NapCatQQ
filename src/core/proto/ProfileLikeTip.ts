// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "ProfilelikeTip.proto" (package "SysMessage", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message SysMessage.likeDetail
 */
export interface likeDetail {
    /**
     * @generated from protobuf field: string txt = 1;
     */
    txt: string;
    /**
     * @generated from protobuf field: int64 uin = 3;
     */
    uin: bigint;
    /**
     * @generated from protobuf field: string nickname = 5;
     */
    nickname: string;
}
/**
 * @generated from protobuf message SysMessage.likeMsg
 */
export interface likeMsg {
    /**
     * @generated from protobuf field: int32 times = 1;
     */
    times: number;
    /**
     * @generated from protobuf field: int32 time = 2;
     */
    time: number;
    /**
     * @generated from protobuf field: SysMessage.likeDetail detail = 3;
     */
    detail?: likeDetail;
}
/**
 * @generated from protobuf message SysMessage.profileLikeTip
 */
export interface profileLikeTip {
    /**
     * @generated from protobuf field: SysMessage.likeMsg msg = 14;
     */
    msg?: likeMsg;
}
// @generated message type with reflection information, may provide speed optimized methods
class likeDetail$Type extends MessageType<likeDetail> {
    constructor() {
        super("SysMessage.likeDetail", [
            { no: 1, name: "txt", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "uin", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "nickname", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<likeDetail>): likeDetail {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.txt = "";
        message.uin = 0n;
        message.nickname = "";
        if (value !== undefined)
            reflectionMergePartial<likeDetail>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: likeDetail): likeDetail {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string txt */ 1:
                    message.txt = reader.string();
                    break;
                case /* int64 uin */ 3:
                    message.uin = reader.int64().toBigInt();
                    break;
                case /* string nickname */ 5:
                    message.nickname = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: likeDetail, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string txt = 1; */
        if (message.txt !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.txt);
        /* int64 uin = 3; */
        if (message.uin !== 0n)
            writer.tag(3, WireType.Varint).int64(message.uin);
        /* string nickname = 5; */
        if (message.nickname !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.nickname);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message SysMessage.likeDetail
 */
export const likeDetail = new likeDetail$Type();
// @generated message type with reflection information, may provide speed optimized methods
class likeMsg$Type extends MessageType<likeMsg> {
    constructor() {
        super("SysMessage.likeMsg", [
            { no: 1, name: "times", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "time", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "detail", kind: "message", T: () => likeDetail }
        ]);
    }
    create(value?: PartialMessage<likeMsg>): likeMsg {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.times = 0;
        message.time = 0;
        if (value !== undefined)
            reflectionMergePartial<likeMsg>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: likeMsg): likeMsg {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 times */ 1:
                    message.times = reader.int32();
                    break;
                case /* int32 time */ 2:
                    message.time = reader.int32();
                    break;
                case /* SysMessage.likeDetail detail */ 3:
                    message.detail = likeDetail.internalBinaryRead(reader, reader.uint32(), options, message.detail);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: likeMsg, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 times = 1; */
        if (message.times !== 0)
            writer.tag(1, WireType.Varint).int32(message.times);
        /* int32 time = 2; */
        if (message.time !== 0)
            writer.tag(2, WireType.Varint).int32(message.time);
        /* SysMessage.likeDetail detail = 3; */
        if (message.detail)
            likeDetail.internalBinaryWrite(message.detail, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message SysMessage.likeMsg
 */
export const likeMsg = new likeMsg$Type();
// @generated message type with reflection information, may provide speed optimized methods
class profileLikeTip$Type extends MessageType<profileLikeTip> {
    constructor() {
        super("SysMessage.profileLikeTip", [
            { no: 14, name: "msg", kind: "message", T: () => likeMsg }
        ]);
    }
    create(value?: PartialMessage<profileLikeTip>): profileLikeTip {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<profileLikeTip>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: profileLikeTip): profileLikeTip {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* SysMessage.likeMsg msg */ 14:
                    message.msg = likeMsg.internalBinaryRead(reader, reader.uint32(), options, message.msg);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: profileLikeTip, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* SysMessage.likeMsg msg = 14; */
        if (message.msg)
            likeMsg.internalBinaryWrite(message.msg, writer.tag(14, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message SysMessage.profileLikeTip
 */
export const profileLikeTip = new profileLikeTip$Type();
